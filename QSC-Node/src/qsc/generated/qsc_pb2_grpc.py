# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import qsc.generated.qsc_pb2 as qsc__pb2


class PublicAPIStub(object):
    """//////////////////////////
    //////////////////////////
    //////////////////////////
    ////     API       ///////
    //////////////////////////
    //////////////////////////
    //////////////////////////

    This service describes the Public API used by clients (wallet/cli/etc)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNodeState = channel.unary_unary(
                '/qsc.PublicAPI/GetNodeState',
                request_serializer=qsc__pb2.GetNodeStateReq.SerializeToString,
                response_deserializer=qsc__pb2.GetNodeStateResp.FromString,
                )
        self.GetKnownPeers = channel.unary_unary(
                '/qsc.PublicAPI/GetKnownPeers',
                request_serializer=qsc__pb2.GetKnownPeersReq.SerializeToString,
                response_deserializer=qsc__pb2.GetKnownPeersResp.FromString,
                )
        self.GetPeersStat = channel.unary_unary(
                '/qsc.PublicAPI/GetPeersStat',
                request_serializer=qsc__pb2.GetPeersStatReq.SerializeToString,
                response_deserializer=qsc__pb2.GetPeersStatResp.FromString,
                )
        self.GetStats = channel.unary_unary(
                '/qsc.PublicAPI/GetStats',
                request_serializer=qsc__pb2.GetStatsReq.SerializeToString,
                response_deserializer=qsc__pb2.GetStatsResp.FromString,
                )
        self.GetAddressState = channel.unary_unary(
                '/qsc.PublicAPI/GetAddressState',
                request_serializer=qsc__pb2.GetAddressStateReq.SerializeToString,
                response_deserializer=qsc__pb2.GetAddressStateResp.FromString,
                )
        self.GetOptimizedAddressState = channel.unary_unary(
                '/qsc.PublicAPI/GetOptimizedAddressState',
                request_serializer=qsc__pb2.GetAddressStateReq.SerializeToString,
                response_deserializer=qsc__pb2.GetOptimizedAddressStateResp.FromString,
                )
        self.GetMultiSigAddressState = channel.unary_unary(
                '/qsc.PublicAPI/GetMultiSigAddressState',
                request_serializer=qsc__pb2.GetMultiSigAddressStateReq.SerializeToString,
                response_deserializer=qsc__pb2.GetMultiSigAddressStateResp.FromString,
                )
        self.IsSlave = channel.unary_unary(
                '/qsc.PublicAPI/IsSlave',
                request_serializer=qsc__pb2.IsSlaveReq.SerializeToString,
                response_deserializer=qsc__pb2.IsSlaveResp.FromString,
                )
        self.GetObject = channel.unary_unary(
                '/qsc.PublicAPI/GetObject',
                request_serializer=qsc__pb2.GetObjectReq.SerializeToString,
                response_deserializer=qsc__pb2.GetObjectResp.FromString,
                )
        self.GetLatestData = channel.unary_unary(
                '/qsc.PublicAPI/GetLatestData',
                request_serializer=qsc__pb2.GetLatestDataReq.SerializeToString,
                response_deserializer=qsc__pb2.GetLatestDataResp.FromString,
                )
        self.PushTransaction = channel.unary_unary(
                '/qsc.PublicAPI/PushTransaction',
                request_serializer=qsc__pb2.PushTransactionReq.SerializeToString,
                response_deserializer=qsc__pb2.PushTransactionResp.FromString,
                )
        self.TransferCoins = channel.unary_unary(
                '/qsc.PublicAPI/TransferCoins',
                request_serializer=qsc__pb2.TransferCoinsReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.ParseAddress = channel.unary_unary(
                '/qsc.PublicAPI/ParseAddress',
                request_serializer=qsc__pb2.ParseAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.ParseAddressResp.FromString,
                )
        self.GetChainStats = channel.unary_unary(
                '/qsc.PublicAPI/GetChainStats',
                request_serializer=qsc__pb2.GetChainStatsReq.SerializeToString,
                response_deserializer=qsc__pb2.GetChainStatsResp.FromString,
                )
        self.GetAddressFromPK = channel.unary_unary(
                '/qsc.PublicAPI/GetAddressFromPK',
                request_serializer=qsc__pb2.GetAddressFromPKReq.SerializeToString,
                response_deserializer=qsc__pb2.GetAddressFromPKResp.FromString,
                )
        self.GetMultiSigCreateTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetMultiSigCreateTxn',
                request_serializer=qsc__pb2.MultiSigCreateTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetMultiSigSpendTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetMultiSigSpendTxn',
                request_serializer=qsc__pb2.MultiSigSpendTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetMultiSigVoteTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetMultiSigVoteTxn',
                request_serializer=qsc__pb2.MultiSigVoteTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetMessageTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetMessageTxn',
                request_serializer=qsc__pb2.MessageTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetTokenTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetTokenTxn',
                request_serializer=qsc__pb2.TokenTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetTransferTokenTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetTransferTokenTxn',
                request_serializer=qsc__pb2.TransferTokenTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetSlaveTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetSlaveTxn',
                request_serializer=qsc__pb2.SlaveTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetLatticeTxn = channel.unary_unary(
                '/qsc.PublicAPI/GetLatticeTxn',
                request_serializer=qsc__pb2.LatticeTxnReq.SerializeToString,
                response_deserializer=qsc__pb2.TransferCoinsResp.FromString,
                )
        self.GetTransaction = channel.unary_unary(
                '/qsc.PublicAPI/GetTransaction',
                request_serializer=qsc__pb2.GetTransactionReq.SerializeToString,
                response_deserializer=qsc__pb2.GetTransactionResp.FromString,
                )
        self.GetMiniTransactionsByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetMiniTransactionsByAddress',
                request_serializer=qsc__pb2.GetMiniTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetMiniTransactionsByAddressResp.FromString,
                )
        self.GetTransactionsByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetTransactionsByAddress',
                request_serializer=qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetTransactionsByAddressResp.FromString,
                )
        self.GetTokensByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetTokensByAddress',
                request_serializer=qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetTokensByAddressResp.FromString,
                )
        self.GetSlavesByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetSlavesByAddress',
                request_serializer=qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetSlavesByAddressResp.FromString,
                )
        self.GetLatticePKsByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetLatticePKsByAddress',
                request_serializer=qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetLatticePKsByAddressResp.FromString,
                )
        self.GetMultiSigAddressesByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetMultiSigAddressesByAddress',
                request_serializer=qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetMultiSigAddressesByAddressResp.FromString,
                )
        self.GetMultiSigSpendTxsByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetMultiSigSpendTxsByAddress',
                request_serializer=qsc__pb2.GetMultiSigSpendTxsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetMultiSigSpendTxsByAddressResp.FromString,
                )
        self.GetVoteStats = channel.unary_unary(
                '/qsc.PublicAPI/GetVoteStats',
                request_serializer=qsc__pb2.GetVoteStatsReq.SerializeToString,
                response_deserializer=qsc__pb2.GetVoteStatsResp.FromString,
                )
        self.GetInboxMessagesByAddress = channel.unary_unary(
                '/qsc.PublicAPI/GetInboxMessagesByAddress',
                request_serializer=qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
                response_deserializer=qsc__pb2.GetInboxMessagesByAddressResp.FromString,
                )
        self.GetBalance = channel.unary_unary(
                '/qsc.PublicAPI/GetBalance',
                request_serializer=qsc__pb2.GetBalanceReq.SerializeToString,
                response_deserializer=qsc__pb2.GetBalanceResp.FromString,
                )
        self.GetTotalBalance = channel.unary_unary(
                '/qsc.PublicAPI/GetTotalBalance',
                request_serializer=qsc__pb2.GetTotalBalanceReq.SerializeToString,
                response_deserializer=qsc__pb2.GetTotalBalanceResp.FromString,
                )
        self.GetOTS = channel.unary_unary(
                '/qsc.PublicAPI/GetOTS',
                request_serializer=qsc__pb2.GetOTSReq.SerializeToString,
                response_deserializer=qsc__pb2.GetOTSResp.FromString,
                )
        self.GetHeight = channel.unary_unary(
                '/qsc.PublicAPI/GetHeight',
                request_serializer=qsc__pb2.GetHeightReq.SerializeToString,
                response_deserializer=qsc__pb2.GetHeightResp.FromString,
                )
        self.GetBlock = channel.unary_unary(
                '/qsc.PublicAPI/GetBlock',
                request_serializer=qsc__pb2.GetBlockReq.SerializeToString,
                response_deserializer=qsc__pb2.GetBlockResp.FromString,
                )
        self.GetBlockByNumber = channel.unary_unary(
                '/qsc.PublicAPI/GetBlockByNumber',
                request_serializer=qsc__pb2.GetBlockByNumberReq.SerializeToString,
                response_deserializer=qsc__pb2.GetBlockByNumberResp.FromString,
                )


class PublicAPIServicer(object):
    """//////////////////////////
    //////////////////////////
    //////////////////////////
    ////     API       ///////
    //////////////////////////
    //////////////////////////
    //////////////////////////

    This service describes the Public API used by clients (wallet/cli/etc)
    """

    def GetNodeState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKnownPeers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeersStat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptimizedAddressState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultiSigAddressState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsSlave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferCoins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChainStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressFromPK(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultiSigCreateTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultiSigSpendTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultiSigVoteTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessageTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokenTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransferTokenTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlaveTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatticeTxn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMiniTransactionsByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionsByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTokensByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlavesByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatticePKsByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultiSigAddressesByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultiSigSpendTxsByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVoteStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInboxMessagesByAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTotalBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOTS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHeight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockByNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PublicAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNodeState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeState,
                    request_deserializer=qsc__pb2.GetNodeStateReq.FromString,
                    response_serializer=qsc__pb2.GetNodeStateResp.SerializeToString,
            ),
            'GetKnownPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKnownPeers,
                    request_deserializer=qsc__pb2.GetKnownPeersReq.FromString,
                    response_serializer=qsc__pb2.GetKnownPeersResp.SerializeToString,
            ),
            'GetPeersStat': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeersStat,
                    request_deserializer=qsc__pb2.GetPeersStatReq.FromString,
                    response_serializer=qsc__pb2.GetPeersStatResp.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=qsc__pb2.GetStatsReq.FromString,
                    response_serializer=qsc__pb2.GetStatsResp.SerializeToString,
            ),
            'GetAddressState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddressState,
                    request_deserializer=qsc__pb2.GetAddressStateReq.FromString,
                    response_serializer=qsc__pb2.GetAddressStateResp.SerializeToString,
            ),
            'GetOptimizedAddressState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptimizedAddressState,
                    request_deserializer=qsc__pb2.GetAddressStateReq.FromString,
                    response_serializer=qsc__pb2.GetOptimizedAddressStateResp.SerializeToString,
            ),
            'GetMultiSigAddressState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultiSigAddressState,
                    request_deserializer=qsc__pb2.GetMultiSigAddressStateReq.FromString,
                    response_serializer=qsc__pb2.GetMultiSigAddressStateResp.SerializeToString,
            ),
            'IsSlave': grpc.unary_unary_rpc_method_handler(
                    servicer.IsSlave,
                    request_deserializer=qsc__pb2.IsSlaveReq.FromString,
                    response_serializer=qsc__pb2.IsSlaveResp.SerializeToString,
            ),
            'GetObject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObject,
                    request_deserializer=qsc__pb2.GetObjectReq.FromString,
                    response_serializer=qsc__pb2.GetObjectResp.SerializeToString,
            ),
            'GetLatestData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestData,
                    request_deserializer=qsc__pb2.GetLatestDataReq.FromString,
                    response_serializer=qsc__pb2.GetLatestDataResp.SerializeToString,
            ),
            'PushTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.PushTransaction,
                    request_deserializer=qsc__pb2.PushTransactionReq.FromString,
                    response_serializer=qsc__pb2.PushTransactionResp.SerializeToString,
            ),
            'TransferCoins': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferCoins,
                    request_deserializer=qsc__pb2.TransferCoinsReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'ParseAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseAddress,
                    request_deserializer=qsc__pb2.ParseAddressReq.FromString,
                    response_serializer=qsc__pb2.ParseAddressResp.SerializeToString,
            ),
            'GetChainStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChainStats,
                    request_deserializer=qsc__pb2.GetChainStatsReq.FromString,
                    response_serializer=qsc__pb2.GetChainStatsResp.SerializeToString,
            ),
            'GetAddressFromPK': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddressFromPK,
                    request_deserializer=qsc__pb2.GetAddressFromPKReq.FromString,
                    response_serializer=qsc__pb2.GetAddressFromPKResp.SerializeToString,
            ),
            'GetMultiSigCreateTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultiSigCreateTxn,
                    request_deserializer=qsc__pb2.MultiSigCreateTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetMultiSigSpendTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultiSigSpendTxn,
                    request_deserializer=qsc__pb2.MultiSigSpendTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetMultiSigVoteTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultiSigVoteTxn,
                    request_deserializer=qsc__pb2.MultiSigVoteTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetMessageTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessageTxn,
                    request_deserializer=qsc__pb2.MessageTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetTokenTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokenTxn,
                    request_deserializer=qsc__pb2.TokenTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetTransferTokenTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransferTokenTxn,
                    request_deserializer=qsc__pb2.TransferTokenTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetSlaveTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlaveTxn,
                    request_deserializer=qsc__pb2.SlaveTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetLatticeTxn': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatticeTxn,
                    request_deserializer=qsc__pb2.LatticeTxnReq.FromString,
                    response_serializer=qsc__pb2.TransferCoinsResp.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=qsc__pb2.GetTransactionReq.FromString,
                    response_serializer=qsc__pb2.GetTransactionResp.SerializeToString,
            ),
            'GetMiniTransactionsByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMiniTransactionsByAddress,
                    request_deserializer=qsc__pb2.GetMiniTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetMiniTransactionsByAddressResp.SerializeToString,
            ),
            'GetTransactionsByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionsByAddress,
                    request_deserializer=qsc__pb2.GetTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetTransactionsByAddressResp.SerializeToString,
            ),
            'GetTokensByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokensByAddress,
                    request_deserializer=qsc__pb2.GetTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetTokensByAddressResp.SerializeToString,
            ),
            'GetSlavesByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlavesByAddress,
                    request_deserializer=qsc__pb2.GetTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetSlavesByAddressResp.SerializeToString,
            ),
            'GetLatticePKsByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatticePKsByAddress,
                    request_deserializer=qsc__pb2.GetTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetLatticePKsByAddressResp.SerializeToString,
            ),
            'GetMultiSigAddressesByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultiSigAddressesByAddress,
                    request_deserializer=qsc__pb2.GetTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetMultiSigAddressesByAddressResp.SerializeToString,
            ),
            'GetMultiSigSpendTxsByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultiSigSpendTxsByAddress,
                    request_deserializer=qsc__pb2.GetMultiSigSpendTxsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetMultiSigSpendTxsByAddressResp.SerializeToString,
            ),
            'GetVoteStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVoteStats,
                    request_deserializer=qsc__pb2.GetVoteStatsReq.FromString,
                    response_serializer=qsc__pb2.GetVoteStatsResp.SerializeToString,
            ),
            'GetInboxMessagesByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInboxMessagesByAddress,
                    request_deserializer=qsc__pb2.GetTransactionsByAddressReq.FromString,
                    response_serializer=qsc__pb2.GetInboxMessagesByAddressResp.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=qsc__pb2.GetBalanceReq.FromString,
                    response_serializer=qsc__pb2.GetBalanceResp.SerializeToString,
            ),
            'GetTotalBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTotalBalance,
                    request_deserializer=qsc__pb2.GetTotalBalanceReq.FromString,
                    response_serializer=qsc__pb2.GetTotalBalanceResp.SerializeToString,
            ),
            'GetOTS': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOTS,
                    request_deserializer=qsc__pb2.GetOTSReq.FromString,
                    response_serializer=qsc__pb2.GetOTSResp.SerializeToString,
            ),
            'GetHeight': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHeight,
                    request_deserializer=qsc__pb2.GetHeightReq.FromString,
                    response_serializer=qsc__pb2.GetHeightResp.SerializeToString,
            ),
            'GetBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlock,
                    request_deserializer=qsc__pb2.GetBlockReq.FromString,
                    response_serializer=qsc__pb2.GetBlockResp.SerializeToString,
            ),
            'GetBlockByNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockByNumber,
                    request_deserializer=qsc__pb2.GetBlockByNumberReq.FromString,
                    response_serializer=qsc__pb2.GetBlockByNumberResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qsc.PublicAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PublicAPI(object):
    """//////////////////////////
    //////////////////////////
    //////////////////////////
    ////     API       ///////
    //////////////////////////
    //////////////////////////
    //////////////////////////

    This service describes the Public API used by clients (wallet/cli/etc)
    """

    @staticmethod
    def GetNodeState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetNodeState',
            qsc__pb2.GetNodeStateReq.SerializeToString,
            qsc__pb2.GetNodeStateResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKnownPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetKnownPeers',
            qsc__pb2.GetKnownPeersReq.SerializeToString,
            qsc__pb2.GetKnownPeersResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPeersStat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetPeersStat',
            qsc__pb2.GetPeersStatReq.SerializeToString,
            qsc__pb2.GetPeersStatResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetStats',
            qsc__pb2.GetStatsReq.SerializeToString,
            qsc__pb2.GetStatsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAddressState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetAddressState',
            qsc__pb2.GetAddressStateReq.SerializeToString,
            qsc__pb2.GetAddressStateResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOptimizedAddressState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetOptimizedAddressState',
            qsc__pb2.GetAddressStateReq.SerializeToString,
            qsc__pb2.GetOptimizedAddressStateResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultiSigAddressState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMultiSigAddressState',
            qsc__pb2.GetMultiSigAddressStateReq.SerializeToString,
            qsc__pb2.GetMultiSigAddressStateResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsSlave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/IsSlave',
            qsc__pb2.IsSlaveReq.SerializeToString,
            qsc__pb2.IsSlaveResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetObject',
            qsc__pb2.GetObjectReq.SerializeToString,
            qsc__pb2.GetObjectResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetLatestData',
            qsc__pb2.GetLatestDataReq.SerializeToString,
            qsc__pb2.GetLatestDataResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/PushTransaction',
            qsc__pb2.PushTransactionReq.SerializeToString,
            qsc__pb2.PushTransactionResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferCoins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/TransferCoins',
            qsc__pb2.TransferCoinsReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ParseAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/ParseAddress',
            qsc__pb2.ParseAddressReq.SerializeToString,
            qsc__pb2.ParseAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChainStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetChainStats',
            qsc__pb2.GetChainStatsReq.SerializeToString,
            qsc__pb2.GetChainStatsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAddressFromPK(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetAddressFromPK',
            qsc__pb2.GetAddressFromPKReq.SerializeToString,
            qsc__pb2.GetAddressFromPKResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultiSigCreateTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMultiSigCreateTxn',
            qsc__pb2.MultiSigCreateTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultiSigSpendTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMultiSigSpendTxn',
            qsc__pb2.MultiSigSpendTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultiSigVoteTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMultiSigVoteTxn',
            qsc__pb2.MultiSigVoteTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMessageTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMessageTxn',
            qsc__pb2.MessageTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTokenTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetTokenTxn',
            qsc__pb2.TokenTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransferTokenTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetTransferTokenTxn',
            qsc__pb2.TransferTokenTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSlaveTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetSlaveTxn',
            qsc__pb2.SlaveTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatticeTxn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetLatticeTxn',
            qsc__pb2.LatticeTxnReq.SerializeToString,
            qsc__pb2.TransferCoinsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetTransaction',
            qsc__pb2.GetTransactionReq.SerializeToString,
            qsc__pb2.GetTransactionResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMiniTransactionsByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMiniTransactionsByAddress',
            qsc__pb2.GetMiniTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetMiniTransactionsByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactionsByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetTransactionsByAddress',
            qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetTransactionsByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTokensByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetTokensByAddress',
            qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetTokensByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSlavesByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetSlavesByAddress',
            qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetSlavesByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatticePKsByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetLatticePKsByAddress',
            qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetLatticePKsByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultiSigAddressesByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMultiSigAddressesByAddress',
            qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetMultiSigAddressesByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultiSigSpendTxsByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetMultiSigSpendTxsByAddress',
            qsc__pb2.GetMultiSigSpendTxsByAddressReq.SerializeToString,
            qsc__pb2.GetMultiSigSpendTxsByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVoteStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetVoteStats',
            qsc__pb2.GetVoteStatsReq.SerializeToString,
            qsc__pb2.GetVoteStatsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInboxMessagesByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetInboxMessagesByAddress',
            qsc__pb2.GetTransactionsByAddressReq.SerializeToString,
            qsc__pb2.GetInboxMessagesByAddressResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetBalance',
            qsc__pb2.GetBalanceReq.SerializeToString,
            qsc__pb2.GetBalanceResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTotalBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetTotalBalance',
            qsc__pb2.GetTotalBalanceReq.SerializeToString,
            qsc__pb2.GetTotalBalanceResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetOTS',
            qsc__pb2.GetOTSReq.SerializeToString,
            qsc__pb2.GetOTSResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetHeight',
            qsc__pb2.GetHeightReq.SerializeToString,
            qsc__pb2.GetHeightResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetBlock',
            qsc__pb2.GetBlockReq.SerializeToString,
            qsc__pb2.GetBlockResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockByNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qsc.PublicAPI/GetBlockByNumber',
            qsc__pb2.GetBlockByNumberReq.SerializeToString,
            qsc__pb2.GetBlockByNumberResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminAPIStub(object):
    """This is a place holder for testing/instrumentation APIs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class AdminAPIServicer(object):
    """This is a place holder for testing/instrumentation APIs
    """


def add_AdminAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qsc.AdminAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminAPI(object):
    """This is a place holder for testing/instrumentation APIs
    """
